from stellar_sdk import Keypair, Server, Network
from stellar_sdk.soroban import SorobanServer
from stellar_sdk.exceptions import NotFoundError, BadRequestError
from logging import Logger

Network.TESTNET_NETWORK_PASSPHRASE

def get_game_rank(contract_address: str, logger: Logger, soroban: Server):
    try:
        
        logger.info(f"üìä Consultando ranking do tap_game")
        logger.info(f"üìã Contract: {contract_address}")
        
        # Simular chamada de leitura para get_rank
        from stellar_sdk import TransactionBuilder, scval
        from stellar_sdk.soroban.soroban_rpc import SimulateTransactionRequest
        
        # Criar uma conta tempor√°ria para simula√ß√£o
        temp_keypair = Keypair.random()
        server = Server(TESTNET_URL)
        
        # Construir transa√ß√£o de simula√ß√£o
        source_account = server.load_account(temp_keypair.public_key)
        
        transaction_builder = TransactionBuilder(
            source_account=source_account,
            network_passphrase=NETWORK_PASSPHRASE,
            base_fee=100
        )
        
        # Adicionar opera√ß√£o de invoca√ß√£o para get_rank
        transaction_builder = transaction_builder.append_invoke_contract_op(
            contract_address=contract_address,
            function_name="get_rank",
            function_args=[]
        )
        
        transaction = transaction_builder.set_timeout(30).build()
        
        # Simular transa√ß√£o
        simulate_request = SimulateTransactionRequest(transaction=transaction)
        simulate_response = soroban_server.simulate_transaction(simulate_request)
        
        if simulate_response.error:
            logger.error(f"‚ùå Erro na simula√ß√£o: {simulate_response.error}")
            return {
                "success": False,
                "error": simulate_response.error,
                "data": None
            }
        
        # Extrair resultado
        result_xdr = simulate_response.result
        if result_xdr and result_xdr.auth:
            logger.info("‚úÖ Ranking obtido com sucesso")
            return {
                "success": True,
                "error": None,
                "data": result_xdr,
                "ranking": "Dados do ranking em XDR"
            }
        
        logger.info("‚úÖ Consulta realizada (sem dados)")
        return {
            "success": True,
            "error": None,
            "data": None,
            "ranking": []
        }
        
    except NotFoundError as e:
        logger.error(f"‚ùå Contrato n√£o encontrado: {e}")
        return {
            "success": False,
            "error": f"Contrato n√£o encontrado: {e}",
            "data": None
        }
    except BadRequestError as e:
        logger.error(f"‚ùå Erro na requisi√ß√£o: {e}")
        return {
            "success": False,
            "error": f"Erro na requisi√ß√£o: {e}",
            "data": None
        }
    except Exception as e:
        logger.error(f"‚ùå Erro inesperado: {e}")
        return {
            "success": False,
            "error": f"Erro inesperado: {e}",
            "data": None
        }

def get_player_score(contract_address: str, player_address: str):
    """
    Obt√©m o score de um jogador espec√≠fico
    
    Args:
        contract_address (str): Endere√ßo do contrato tap_game
        player_address (str): Endere√ßo do jogador
        
    Returns:
        dict: Resultado da consulta com o score do jogador
    """
    try:
        logger.info(f"üéØ Consultando score do jogador")
        logger.info(f"üìã Contract: {contract_address}")
        logger.info(f"üë§ Player: {player_address}")
        
        # Implementa√ß√£o similar ao get_game_rank, mas consultando storage espec√≠fico
        # Por enquanto, retornamos uma estrutura de exemplo
        logger.info("‚ÑπÔ∏è Fun√ß√£o de consulta de score individual em desenvolvimento")
        logger.info("üí° Use get_game_rank() e filtre pelo player_address")
        
        return {
            "success": True,
            "error": None,
            "player_address": player_address,
            "score": None,
            "message": "Use get_game_rank() para obter todos os scores"
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao consultar score: {e}")
        return {
            "success": False,
            "error": f"Erro ao consultar score: {e}",
            "data": None
        }

def check_contract_initialized(contract_address: str):
    """
    Verifica se o contrato foi inicializado
    
    Args:
        contract_address (str): Endere√ßo do contrato tap_game
        
    Returns:
        dict: Resultado da verifica√ß√£o
    """
    try:
        logger.info(f"üîç Verificando inicializa√ß√£o do contrato")
        logger.info(f"üìã Contract: {contract_address}")
        
        # Tentar obter o ranking - se existir, o contrato foi inicializado
        rank_result = get_game_rank(contract_address)
        
        if rank_result["success"]:
            logger.info("‚úÖ Contrato inicializado")
            return {
                "success": True,
                "initialized": True,
                "error": None
            }
        else:
            logger.warning("‚ö†Ô∏è Contrato pode n√£o estar inicializado")
            return {
                "success": True,
                "initialized": False,
                "error": rank_result["error"]
            }
            
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar inicializa√ß√£o: {e}")
        return {
            "success": False,
            "initialized": False,
            "error": f"Erro ao verificar inicializa√ß√£o: {e}"
        }

if __name__ == "__main__":
    # Teste das fun√ß√µes de leitura
    logger.info("üß™ Testando fun√ß√µes de leitura do tap_game...")
    
    # Exemplo de uso (substitua pelo endere√ßo real do contrato)
    contract_address = "CXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    
    logger.info("‚ÑπÔ∏è Para testar, substitua contract_address pelo endere√ßo real")
    logger.info("‚ÑπÔ∏è Exemplo de uso:")
    logger.info(f"‚ÑπÔ∏è get_game_rank('{contract_address}')")
    logger.info(f"‚ÑπÔ∏è check_contract_initialized('{contract_address}')")